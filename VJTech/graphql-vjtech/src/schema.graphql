# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    soirees(query: String, first: Int, skip: Int, after: String, orderBy: SoireeOrderByInput): [Soiree!]!
    mySoirees(query: String, first: Int, skip: Int, after: String, orderBy: SoireeOrderByInput): [Soiree!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    me: User!
    soiree(id: ID!): Soiree!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createSoiree(data: CreateSoireeInput!): Soiree!
    deleteSoiree(id: ID!): Soiree!
    updateSoiree(id: ID!, data: UpdateSoireeInput!): Soiree!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
    comment(soireeId: ID!): CommentSubscriptionPayload!
    soiree: SoireeSubscriptionPayload!
    mySoiree: SoireeSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    isVJ: Boolean!
    isOrga: Boolean!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    isVJ: Boolean!
    isOrga: Boolean!
}

input CreateSoireeInput {
    title: String!
    body: String!
    # date: DateTime!
    published: Boolean!
}

input UpdateSoireeInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    soiree: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    isVJ: Boolean!
    isOrga: Boolean!
    soirees: [Soiree!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Soiree {
    id: ID!
    title: String!
    # date: DateTime!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    soiree: Soiree!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type SoireeSubscriptionPayload {
    mutation: MutationType!
    node: Soiree
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}